name: Build

on: [push]

jobs:

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Release", 
            cc: "clang", 
            cxx: "clang++"
          }


    steps:
          
      - name: Checkout Konclude code
        uses: actions/checkout@v2       
        with:
          path: "konclude-static"        
    
      - name: Install Dependencies
        run: |          
          brew install autoconf automake libtool gtk-doc bison mpfr libgcrypt libiconv 
          echo "checking bison version"  
          bison -V   
          brew unlink bison
          brew link bison --force
          echo 'export PATH="/usr/local/opt/bison/bin:$PATH"' >> /Users/runner/.bash_profile     
          cp /usr/local/opt/bison/bin/bison /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/bison            
          source ~/.bash_profile 
          bison -V
          echo "checking mpfr"
          brew info mpfr
          echo "checking libs"
          ls -al /usr/local/lib
          echo "gcrypt libs"
          ls -al /usr/local/lib/../Cellar/libgcrypt/1.9.1/lib/
        
      - name: Prepare Environment
        run: |
          ROOT="$(pwd)"
          mkdir src
          mkdir lib
          echo $ROOT          
          echo "usr libs"
          ls -al /usr/lib
          echo " "
          echo "opt/xz"
          ls -al /usr/local/opt/xz/lib/
          echo " "
          echo "opt/xz"
          ls -al /usr/local/opt/gmp/lib/
          echo " "
          echo "opt/xz"
          ls -al /usr/local/opt/libgpg-error/lib/
          echo " "
          echo "opt/xz"
          ls -al /usr/local/opt/libtool/lib/
          echo " "
          echo "opt/xz"
          ls -al /usr/local/opt/pcre/lib/
          
          
      - name: Install Libxml2
        run: |
          ROOT="$(pwd)"
          # download, build and install libxml2
          cd $ROOT/src \
          && wget ftp://xmlsoft.org/libxml2/libxml2-2.9.9.tar.gz \
          && tar -xvzf libxml2-2.9.9.tar.gz \
          && mv libxml2-2.9.9 libxml2-static \
          && cd libxml2-static \
          && ./configure --without-python --prefix=$ROOT/lib/libxml2-static \
          && make \
          && make install
          
      - name: Check Libxml2 libs
        run: |
          ROOT="$(pwd)"
          ls -al $ROOT/lib/libxml2-static/lib/

      - name: Install Redland Raptor
        run: |
          ROOT="$(pwd)"
          # download, build and install raptor          
          echo 'export PATH="/usr/local/opt/bison/bin:$PATH"' >> /Users/runner/.bash_profile 
          cd $ROOT/src \
          && wget http://download.librdf.org/source/raptor2-2.0.15.tar.gz \
          && tar -xvzf raptor2-2.0.15.tar.gz \
          && mv raptor2-2.0.15 raptor2-static \
          && cd raptor2-static \
          && export LIBS="-L$ROOT/lib/libxml2-static/lib -lxml2" \
          && export LIBXML_LIBS="-L$ROOT/lib/libxml2-static/lib -lxml2" \
          && export LIBXML_LIBS="$ROOT/lib/libxml2-static/libxml2.a" \
          && ./configure --prefix=$ROOT/lib/raptor2-static --with-xml2-config=$ROOT/lib/libxml2-static/bin/xml2-config \
          && make \
          && make install
          
          
      - name: Check Raptor libs
        run: |
          ROOT="$(pwd)"
          ls -al $ROOT/lib/raptor2-static/lib/       
          
      - name: Install Redland Rasqal
        run: |
          ROOT="$(pwd)"
          # download, build and install rasqal
          cd $ROOT/src \
          && git clone git://github.com/andreas-steigmiller/rasqal.git \
          && mv rasqal rasqal-static \
          && cd rasqal-static \
          \
          && export RAPTOR2_CFLAGS="-I $ROOT/lib/raptor2-static/include/raptor2" \
          && export RAPTOR2_LIBS="-L$ROOT/lib/raptor2-static/lib -lraptor2 -L$ROOT/lib/libxml2-static/lib -lxml2 -lm -ldl" \
          && export RAPTOR_VERSION=2.0.15 \
          && sed -i -e 's#RAPTOR_VERSION=`$PKG_CONFIG raptor2 --modversion 2>/dev/null`#if test -n "$RAPTOR_VERSION"; then echo "Assuming raptor version $RAPTOR_VERSION"; else RAPTOR_VERSION=`$PKG_CONFIG raptor2 --modversion 2>/dev/null`; fi#g' configure.ac \
          && git log --oneline | grep -q 0c42ebc \
          \
          && ./autogen.sh --prefix=$ROOT/lib/rasqal-static --disable-gtk-doc \
          && ls \
          && make \
          && make install
          
          
          
      - name: Check Rasqal libs
        run: |
          ROOT="$(pwd)"
          ls -al $ROOT/lib/rasqal-static/lib/              
          
      - name: Compile Redland RDFlib
        run: |
          ROOT="$(pwd)"
          # download, build and install redland rdflib
          cd $ROOT \
          && wget http://download.librdf.org/source/redland-1.0.17.tar.gz \
          && tar -xvzf redland-1.0.17.tar.gz \
          && mv redland-1.0.17 redland-static \
          && cd redland-static \
          \
          && export RAPTOR2_CFLAGS="-I $ROOT/lib/raptor2-static/include/raptor2" \
          && export RAPTOR2_LIBS="-L$ROOT/lib/raptor2-static/lib -lraptor2 -L$ROOT/lib/libxml2-static/lib -lxml2 -lm -ldl" \
          && export RAPTOR_VERSION=2.0.15 \
          && sed -i -e 's#RAPTOR_VERSION=`$PKG_CONFIG raptor2 --modversion 2>/dev/null`#if test -n "$RAPTOR_VERSION"; then echo "Assuming raptor version $RAPTOR_VERSION"; else RAPTOR_VERSION=`$PKG_CONFIG raptor2 --modversion 2>/dev/null`; fi#g' configure \
          \
          && export RASQAL_CFLAGS="-I $ROOT/lib/rasqal-static/include/rasqal" \
          && export RASQAL_LIBS="-L$ROOT/lib/rasqal-static/lib -lrasqal -L$ROOT/lib/raptor-static/lib -lraptor2 -L$ROOT/lib/libxml2-static/lib -lxml2 -lm -ldl -lm" \
          && export RASQAL_VERSION=0.9.33 \
          && sed -i -e 's#RASQAL_VERSION=`$PKG_CONFIG rasqal --modversion 2>/dev/null`#if test -n "$RASQAL_VERSION"; then echo "Assuming rasqal version $RASQAL_VERSION"; else RASQAL_VERSION=`$PKG_CONFIG rasqal --modversion 2>/dev/null`; fi#g' configure \
          \
          && ./configure --prefix=$ROOT/lib/redland-static \
          && sed -i -e 's#librdf_storage_virtuoso_la_LIBADD = -lodbc librdf.la -lrasqal#librdf_storage_virtuoso_la_LIBADD = -lodbc librdf.la#g' src/Makefile \
          && make \
          && make install
          
          
                    
          
      - name: Check Redland RDFlib libs
        run: |
          ROOT="$(pwd)"
          ls -al $ROOT/lib/redland-static/lib/             
          

      - name: Download Qt
        run: |
          ROOT="$(pwd)"
          # download, build and install qt
          cd $ROOT/src \
          && wget -q https://download.qt.io/official_releases/qt/5.12/5.12.10/single/qt-everywhere-src-5.12.10.tar.xz \
          && tar -xJf qt-everywhere-src-5.12.10.tar.xz \
          && mv qt-everywhere-src-5.12.10 qt-static
          
      - name: Prepare Qt
        run: |
          ROOT="$(pwd)"          
          cd $ROOT/src/qt-static \
          && export MAKE=/usr/bin/make \
          && ./configure -static -prefix $ROOT/qt-static -extprefix $ROOT/lib/qt-static -no-opengl -nomake examples -nomake tests -opensource -platform macx-clang -no-icu -confirm-license -opensource
          
          
      - name: Cache Qt Compilation
        uses: actions/cache@v2
        env:
          cache-name: cache-qt-compilation
        with:
          path: src/qt-static
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('src/qt-static/makefile') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
          
          
      - name: Compile Qt
        timeout-minutes: 420
        run: |
          ROOT="$(pwd)"
          cd $ROOT/src/qt-static
          make           
          
      - name: Install Qt
        run: |
          ROOT="$(pwd)"          
          cd $ROOT/src/qt-static \
          && make install
                    
          

      - name: Prepare Konclude Sources
        run: |
          ROOT="$(pwd)"
          # remove intermediate files (to ensure a clean build later)
          cd $ROOT \
          && rm -rf konclude-static/Release \
          && rm -rf konclude-static/release \
          && rm -rf konclude-static/GeneratedFiles
          
          mkdir -p $ROOT/konclude-static/External/librdf/Linux/x64/lib/release          
          cp $ROOT/lib/libxml2-static/lib/libxml2.a $ROOT/konclude-static/External/librdf/Linux/x64/lib/release/libxml2.a \
          \
          && cp $ROOT/lib/raptor2-static/lib/libraptor2.a $ROOT/konclude-static/External/librdf/Linux/x64/lib/release/libraptor2.a \
          \
          && cp $ROOT/lib/rasqal-static/lib/librasqal.a $ROOT/konclude-static/External/librdf/Linux/x64/lib/release/librasqal.a \
          \
          && cp $ROOT/lib/redland-static/lib/librdf.a $ROOT/konclude-static/External/librdf/Linux/x64/lib/release/librdf.a
          
      - name: Check Konclude Sources
        run: |
          ROOT="$(pwd)"
          cd $ROOT/konclude-static/External/librdf/Linux/x64/lib/release
          pwd
          ls
          
        
      - name: Prepare Konclude Compilation
        run: | 
          ROOT="$(pwd)"          
          BUILD_DIR=$ROOT/konclude-static
          cd $BUILD_DIR
          export PATH=$ROOT/lib/qt-static/bin:$PATH
          export QTDIR=$ROOT/lib/qt-static
          export QTINC=$ROOT/lib/qt-static/include
          export QTLIB=$ROOT/lib/qt-static/lib
          sed -i -e 's#unix:!macx: LIBS += -lz -lltdl -lgmp -ldl#unix:macx: LIBS += -lz -ldl /usr/local/opt/xz/lib/liblzma.a -lcurl -lxslt -L/usr/local/lib /usr/local/lib/../Cellar/libgcrypt/1.9.1/lib/libgcrypt.a  /usr/local/lib/libmpfr.a /usr/local/opt/gmp/lib/libgmp.a /usr/local/opt/libgpg-error/lib/libgpg-error.a /usr/local/opt/libtool/lib/libltdl.a /usr/local/opt/pcre/lib/libpcre.a -liconv#g' Konclude.pro
          qmake -r CONFIG+=release CONFIG+=x86_64 CONFIG-=debug CONFIG+=static -spec $ROOT/lib/qt-static/mkspecs/macx-clang Konclude.pro
        
          
      - uses: actions/upload-artifact@v2
        with:
          name: Konclude Sources
          path: konclude-static            
          
          
          
      - name: Compile Konclude
        run: | 
          ROOT="$(pwd)"          
          BUILD_DIR=$ROOT/konclude-static
          cd $BUILD_DIR          
          make
          otool -L ./Release/Konclude.app/Contents/MacOS/Konclude
          ./Release/Konclude.app/Contents/MacOS/Konclude owllinkfile -c Configs/default-config.xml -v -e -r Tests/Test-response.xml -q Tests/galen-ALEHIF+-classify-request.xml -w 1
           

                           
                    
      - uses: actions/upload-artifact@v2
        with:
          name: Konclude Compilation
          path: konclude-static             
           
      - name: Create Konclude Release
        run: | 
          ROOT="$(pwd)"   
          revisionCount="965"
          revisionTagName="v0.6.2"
          revisionHashName="fa20b125"
          mkdir Release          
          
          BUILD_DIR=$ROOT/konclude-static
          PROJ=$ROOT/konclude-static
          RELEA="$ROOT/Release/Konclude-$revisionTagName-$revisionCount-MacOs-x64-Clang-Static-Qt-5.12"
          
          mkdir $RELEA
          mkdir "$RELEA/Configs"
          mkdir "$RELEA/Tests"
          mkdir "$RELEA/Binaries"
          
          cd $BUILD_DIR
          cp "$BUILD_DIR/Release/Konclude.app/Contents/MacOS/Konclude" "$RELEA/Binaries"
          
          cp "$PROJ/LGPL-3.0.txt" "$RELEA"
          cp "$PROJ/GPL.txt" "$RELEA"
          cp "$PROJ/Readme.md" "$RELEA"

          cp "$PROJ/Tests/1b-satisfiability-request.xml" "$RELEA/Tests"
          cp "$PROJ/Tests/galen.owl.xml" "$RELEA/Tests"
          cp "$PROJ/Tests/galen-classify-request.xml" "$RELEA/Tests"
          cp "$PROJ/Tests/roberts-family-full-D.owl.xml" "$RELEA/Tests"
          cp "$PROJ/Tests/roberts-family-full-D-classify-realize-request.xml" "$RELEA/Tests"
          cp "$PROJ/Tests/lubm-univ-bench.owl.xml" "$RELEA/Tests"
          cp "$PROJ/Tests/lubm-univ-bench-data-1.ttl" "$RELEA/Tests"
          cp "$PROJ/Tests/lubm-univ-bench-sparql-load-and-query-test.sparql" "$RELEA/Tests"
          cp "$PROJ/Tests/lubm-univ-bench-sparql-load-and-complex-query-rasqal-test.sparql" "$RELEA/Tests"
          cp "$PROJ/Tests/roberts-family-full-sparql-existential-variables-query-test.sparql" "$RELEA/Tests"
          cp "$PROJ/Tests/test-request.xml" "$RELEA/Tests"

          cp "$PROJ/Scripts/Konclude" "$RELEA"
          cp "$PROJ/Scripts/Konclude.sh" "$RELEA"


          cp "$PROJ/Configs/default-config.xml" "$RELEA/Configs"
          cp "$PROJ/Configs/querying-config.xml" "$RELEA/Configs"
                    
                                 
                    
      - uses: actions/upload-artifact@v2
        with:
          name: Konclude-v0.6.2-965-MacOs-x64-Clang-Static-Qt-5.12
          path: Release/Konclude-v0.6.2-965-MacOs-x64-Clang-Static-Qt-5.12
